import groovy.text.Template
import groovy.text.markup.MarkupTemplateEngine
import groovy.text.markup.TemplateConfiguration
import org.apache.taglibs.standard.functions.Functions
import org.jahia.services.content.JCRContentUtils
import org.jahia.services.render.RenderService
import org.jahia.services.render.Resource
import org.jahia.taglibs.jcr.node.JCRTagUtils
import org.slf4j.LoggerFactory

import javax.jcr.ItemNotFoundException
logger = LoggerFactory.getLogger(this.class)

getPagesL1={value,curentPageNode ->
    switch (value){
        case "currentPage":return JCRTagUtils.getChildrenOfType(curentPageNode, 'jmix:navMenuItem')
        case "parentPage":return JCRTagUtils.getChildrenOfType(curentPageNode.parent, 'jmix:navMenuItem')
        default:return JCRTagUtils.getChildrenOfType(renderContext.site.home, 'jmix:navMenuItem')
    }
}

getTitle={node ->
    switch (true){
        case JCRTagUtils.isNodeType(node,'jnt:nodeLink'):
            return node.properties['jcr:title'].string?:node.properties['j:node'].node.displayableName
        default:return node.displayableName
    }
}
getUrl={node ->
    switch (true){
        case JCRTagUtils.isNodeType(node,'jnt:navMenuText'):return "#"
        case JCRTagUtils.isNodeType(node,'jnt:externalLink'):return node.properties['j:url'].string
        case JCRTagUtils.isNodeType(node,'jnt:page'):return node.url
        case JCRTagUtils.isNodeType(node,'jnt:nodeLink'):return node.properties['j:node'].node.url
    }
}

showPage={node ->
    if(!node.properties['j:displayInMenuName'])
        return true

    def show = false
    node.properties['j:displayInMenuName'].each {enableMenuName ->
        if(enableMenuName == currentNode.name )show = true
    }
    return show
}

stupid={ value -> if(value=="home")return true}
//def createNavItemHTML = '
//li(class:"nav-item ${active ? ' active':''}")
//'
//        <a class="nav-link" href="${url}">
//${title}
//${active ?'<span class="sr-only">(current)</span>':''}
//</a>
//                </li>
//'

TemplateConfiguration config = new TemplateConfiguration(
        useDoubleQuotes:true, expandEmptyElements: true)
MarkupTemplateEngine engine = new MarkupTemplateEngine(config)

Template template = engine.createTemplate('''
 
    // Nested template to generate
    // FontAwesome markup.
    // The fragment expect a model attribute
    // with the name icon.
    def faIcon = 'span(class: "fa fa-${icon}")'
    

     
    // Nested template to generate
    // a unordered list for given items,
    // specified with the items model attribute.
    String list = """ul {
        items.each { item ->
            li item
        }
    }
    """
     
     
    // Use fragment method.
    fragment list, items: ['A', 'B', 'C']
     
     
    ul {
        ['cloud', 'home', 'pencil'].each { iconValue ->
            if(stupid(iconValue)){
                li(class:"active",toto)
            }else{
                // Generate output with predefined
                // fragment faIcon. Pass value
                // for model attribute icon.
                // We must use ${stringOf{...}} because we apply
                // the fragment as inline element.
                li "${$fragment(faIcon, icon: iconValue)}"
            }
        }
    }
     
    // Reuse fragment in other parts of the template.
    p "This is a ${stringOf {fragment(faIcon, icon: 'cog')}} settings icon."
''')

print template.make([:])

//createDropdown={node,children ->
//    def html = '''
//        <li class="nav-item  ${active? ' active' :''} dropdown">
//            <a class="nav-link dropdown-toggle ${active? ' active' :''}" href="#"
//               id="navbarDropdownMen-${identifier}"
//               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
//                    ${title}
//            </a>
//            <div class="dropdown-menu"
//                 aria-labelledby="navbarDropdownMen-${identifier}">
//                <a class="dropdown-item" href="${url}">${title}</a>
//                <div class="dropdown-divider"></div>
//                ${children.each {node -> createDropdownItem(node)} }
//            </div>
//        </li>
//        '''
//    def template = new groovy.text.StreamingTemplateEngine().createTemplate(html)
//    def binding = [
//            active : renderContext.mainResource.path.contains(node.path),
//            url:getUrl(node),
//            title:getTitle(node),
//            identifier:node.identifier,
//            children:children
//    ]
//    return template.make(binding)
//}
//createDropdownItem={ node ->
//    def html = '''
//        <a class="dropdown-item ${active ? ' active':''}" href="${url}">
//            ${title}
//            ${active ?'<span class="sr-only">(current)</span>':''}
//        </a>
//        '''
//    def template = new groovy.text.StreamingTemplateEngine().createTemplate(html)
//    def binding = [
//            active : renderContext.mainResource.path.contains(node.path),
//            url:getUrl(node),
//            title:getTitle(node)
//    ]
//    return template.make(binding)
//}
//createNavItem={node ->
//    def html = '''
//        <li class="nav-item ${active ? ' active':''}">
//            <a class="nav-link" href="${url}">
//                ${title}
//                ${active ?'<span class="sr-only">(current)</span>':''}
//            </a>
//        </li>
//        '''
//    def template = new groovy.text.StreamingTemplateEngine().createTemplate(html)
//    def binding = [
//            active : renderContext.mainResource.path.contains(node.path),
//            url:getUrl(node),
//            title:getTitle(node)
//    ]
//    return template.make(binding)
//}
//
//def createNavItemHTML = '''
//        <li class="nav-item ${active ? ' active':''}">
//            <a class="nav-link" href="${url}">
//                ${title}
//                ${active ?'<span class="sr-only">(current)</span>':''}
//            </a>
//        </li>
//        '''
//def createDropdownItemHTML = '''
//        <a class="dropdown-item ${active ? ' active':''}" href="${url}">
//            ${title}
//            ${active ?'<span class="sr-only">(current)</span>':''}
//        </a>
//        '''
//def createDropdownHTML = '''
//        <li class="nav-item  ${active? ' active' :''} dropdown">
//            <a class="nav-link dropdown-toggle ${active? ' active' :''}" href="#"
//               id="navbarDropdownMen-${identifier}"
//               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
//                    ${title}
//            </a>
//            <div class="dropdown-menu"
//                 aria-labelledby="navbarDropdownMen-${identifier}">
//                <a class="dropdown-item" href="${url}">${title}</a>
//                <div class="dropdown-divider"></div>
//        '''
//
//
//'''
//                ${children.each {node -> createDropdownItem(node)} }
//            </div>
//        </li>
//        '''
//
//def createDropdown = new groovy.text.StreamingTemplateEngine().createTemplate(createDropdownHTML)
//def createDropdownItem = new groovy.text.StreamingTemplateEngine().createTemplate(createDropdownItemHTML)
//def createNavItem = new groovy.text.StreamingTemplateEngine().createTemplate(createNavItemHTML)
//
//createNav = { node,recursive ->
//    if(!showPage(node))
//        return
//
//    def childNodes = JCRTagUtils.getChildrenOfType(node, 'jmix:navMenuItem')
//    if(childNodes && recursive)
//        return createDropdownItem(node,childNodes)
//
//    return createNavItem(node)
//}
//
//curentPageNode = JCRTagUtils.isNodeType(renderContext.mainResource.node,'jmix:navMenuItem')?
//        renderContext.mainResource.node :
//        JCRTagUtils.getParentOfType(renderContext.mainResource.node,'jmix:navMenuItem')
//
////classUL = JCRTagUtils.isNodeType(currentNode, 'bootstrap4mix:customBaseNavbar') ?
////        currentNode.properties.ulClass.string : null
////
////recursive = JCRTagUtils.isNodeType(currentNode, 'bootstrap4mix:customBaseNavbar') ?
////        currentNode.properties.recursive.string : false
//
//def pagesL1 = getPagesL1(
//        currentNode.properties.root.string,
//        curentPageNode
//)
//
//// Add dependencies to parent of main resource so that we are aware of new pages at sibling level
//try {
//    currentResource.dependencies.add(renderContext.mainResource.node.getParent().getCanonicalPath());
//} catch (ItemNotFoundException e) {
//}
//
//if(!pagesL1.isEmpty()){
//
//    recursive:JCRTagUtils.isNodeType(currentNode, 'bootstrap4mix:customBaseNavbar') ?
//            currentNode.properties.recursive.string : false
//
//    logger.info("pages.each : "+)
//
//    def html = '''
//        <ul class="${classUL}">
//        '''
//    def template = new groovy.text.StreamingTemplateEngine().createTemplate(html)
//    def binding = [
//            classUL:JCRTagUtils.isNodeType(currentNode, 'bootstrap4mix:customBaseNavbar') ?
//                    currentNode.properties.ulClass.string : null
//    ]
//    print template.make(binding)
//    pagesL1.each {page -> createNav(page,true) }
//    print"</ul>"
//    ul {
//        pagesL1.each { page ->
//            fragment createNav(page,true) }
//    }
//}